testBlocks
graph(%a : Dynamic
      %b : Dynamic
      %c : Dynamic) {
  %3 : int = prim::Constant[value=1]()
  %4 : Dynamic = aten::add(%a, %b, %3)
  %6 : Dynamic = prim::If(%c)
    block0() {
      %9 : int = prim::Constant[value=1]()
      %10 : Dynamic = aten::add(%4, %4, %9)
      -> (%10)
    }
    block1() {
      %11 : int = prim::Constant[value=1]()
      %12 : Dynamic = aten::add(%b, %4, %11)
      %13 : int = prim::Constant[value=1]()
      %14 : Dynamic = aten::add(%12, %4, %13)
      -> (%14)
    }
  %15 : int = prim::Constant[value=1]()
  %16 : Dynamic = aten::add(%6, %4, %15)
  return (%16);
}

graph(%a : Dynamic
      %b : Dynamic
      %c : Dynamic) {
  %3 : int = prim::Constant[value=1]()
  %4 : Dynamic = aten::add(%a, %b, %3)
  %6 : Dynamic = prim::If(%c)
    block0() {
      %11 : int = prim::Constant[value=1]()
      %12 : Dynamic = aten::add(%b, %4, %11)
      %13 : int = prim::Constant[value=1]()
      %14 : Dynamic = aten::add(%12, %4, %13)
      -> (%14)
    }
  %15 : int = prim::Constant[value=1]()
  %16 : Dynamic = aten::add(%6, %4, %15)
  return (%16);
}

graph(%a : Dynamic
      %b : Dynamic
      %c : Dynamic) {
  %4 : int = prim::Constant[value=1]()
  %5 : Dynamic = aten::add(%a, %b, %4)
  %6 : Dynamic = prim::If(%c)
    block0() {
      %8 : int = prim::Constant[value=1]()
      %9 : Dynamic = aten::add(%b, %5, %8)
      %10 : int = prim::Constant[value=1]()
      %11 : Dynamic = aten::add(%9, %5, %10)
      -> (%11)
    }
  %12 : int = prim::Constant[value=1]()
  %13 : Dynamic = aten::add(%6, %5, %12)
  return (%13);
}

testCreateAutodiffSubgraphs
graph(%1 : Dynamic
      %2 : Dynamic
      %3 : Dynamic
      %4 : Dynamic
      %5 : Dynamic) {
  %24 : Dynamic, %25 : Dynamic = prim::DifferentiableGraph_0(%1, %4, %2, %5, %3)
  %8 : int = prim::Constant[value=1]()
  %20 : int = prim::Constant[value=1]()
  return (%25, %24);
}
with prim::DifferentiableGraph_0 = graph(%2 : Dynamic
      %3 : Dynamic
      %5 : Dynamic
      %6 : Dynamic
      %18 : Dynamic) {
  %1 : Dynamic = aten::mm(%2, %3)
  %4 : Dynamic = aten::mm(%5, %6)
  %8 : int = prim::Constant[value=1]()
  %7 : Dynamic = aten::add(%1, %4, %8)
  %9 : Dynamic, %10 : Dynamic, %11 : Dynamic, %12 : Dynamic = prim::ConstantChunk[chunks=4, dim=1](%7)
  %13 : Dynamic = aten::sigmoid(%9)
  %14 : Dynamic = aten::sigmoid(%12)
  %15 : Dynamic = aten::tanh(%11)
  %16 : Dynamic = aten::sigmoid(%10)
  %17 : Dynamic = aten::mul(%16, %18)
  %19 : Dynamic = aten::mul(%13, %15)
  %21 : int = prim::Constant[value=1]()
  %20 : Dynamic = aten::add(%17, %19, %21)
  %22 : Dynamic = aten::tanh(%20)
  %23 : Dynamic = aten::mul(%14, %22)
  return (%20, %23);
}

testDifferentiate
graph(%1 : Float(2, 3, 4)
      %2 : Float(2, 3, 4)) {
  %3 : Float(2, 3, 4) = aten::mul(%1, %2)
  %4 : Float(2, 3, 4) = aten::mul(%3, %1)
  %5 : int = prim::Constant[value=1]()
  %6 : Float(2, 3, 4) = aten::add(%4, %2, %5)
  return (%6, %3);
}
graph(%1 : Float(2, 3, 4)
      %2 : Float(2, 3, 4)
      %3 : Float(2, 3, 4)
      %4 : Float(2, 3, 4)
      %5 : Float(2, 3, 4)) {
  %6 : int = prim::Constant[value=1]()
  %7 : Float(2, 3, 4), %8 : Float(2, 3, 4) = prim::GradOf[name="aten::add"](%1)
    block0() {
      %10 : Float(2, 3, 4) = aten::mul(%1, %6)
      -> (%1, %10)
    }
  %11 : Float(2, 3, 4), %12 : Float(2, 3, 4) = prim::GradOf[name="aten::mul"](%7)
    block0() {
      %14 : Float(2, 3, 4) = aten::mul(%7, %3)
      %15 : Float(2, 3, 4) = aten::mul(%7, %5)
      -> (%14, %15)
    }
  %16 : Dynamic = prim::AutogradAdd(%2, %11)
  %17 : Float(2, 3, 4), %18 : Float(2, 3, 4) = prim::GradOf[name="aten::mul"](%16)
    block0() {
      %20 : Float(2, 3, 4) = aten::mul(%16, %4)
      %21 : Float(2, 3, 4) = aten::mul(%16, %3)
      -> (%20, %21)
    }
  %22 : Dynamic = prim::AutogradAdd(%12, %17)
  %23 : Dynamic = prim::AutogradAdd(%8, %18)
  return (%22, %23);
}

testDifferentiateWithRequiresGrad
graph(%1 : Float(*)
      %2 : Float(*)) {
  %3 : Float(*) = aten::mul(%2, %2)
  %4 : int = prim::Constant[value=1]()
  %5 : Float(*) = aten::add(%3, %2, %4)
  %6 : int = prim::Constant[value=1]()
  %7 : Float(*) = aten::add(%5, %1, %6)
  %8 : Float(*) = aten::mul(%7, %1)
  %9 : int = prim::Constant[value=1]()
  %10 : Float(*) = aten::add(%8, %2, %9)
  return (%5, %10, %7);
}
graph(%1 : Float(*)
      %2 : Float(*)
      %3 : Float(*)
      %4 : Float(*)) {
  %5 : int = prim::Constant[value=1]()
  %6 : Float(*), %7 : Dynamic = prim::GradOf[name="aten::add"](%1)
    block0() {
      %9 : Dynamic = aten::mul(%1, %5)
      -> (%1, %9)
    }
  %10 : Dynamic, %11 : Dynamic = prim::GradOf[name="aten::mul"](%6)
    block0() {
      %13 : Dynamic = aten::mul(%6, %3)
      %14 : Dynamic = aten::mul(%6, %4)
      -> (%13, %14)
    }
  %15 : Dynamic = prim::AutogradAdd(%2, %10)
  %16 : Dynamic, %17 : Dynamic = prim::GradOf[name="aten::add"](%15)
    block0() {
      %19 : Dynamic = aten::mul(%15, %5)
      -> (%15, %19)
    }
  %20 : Dynamic = prim::AutogradAdd(%11, %17)
  return (%20);
}

